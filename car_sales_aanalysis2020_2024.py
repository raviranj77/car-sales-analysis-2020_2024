# -*- coding: utf-8 -*-
"""Car Sales Aanalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mKFSBiuFylWgWJbwVx5Rv8Elg0seYx1U

#Car Sales Trend Analysis and Forecasting (2020–2024)

#Install And Import Libarires
"""

!pip install openpyxl
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (12, 6)

"""#Load Data"""

file_path="/content/drive/MyDrive/DATASET/Car_Sales_Data_2020_2024.xlsx"

df=pd.read_excel(file_path)
df

"""#Data Understanding And Cleaning"""

print("🔹 Top 5 Rows:")
print(df.head())

"""#Dataset Summary"""

print("\n🔹 Data Info:")
print(df.info())

"""# Describe Numerical Columns

"""

print("\n🔹 Descriptive Statistics:")
print(df.describe())

"""# Check Missing Values

"""

print("\n🔹 Missing Values:")
print(df.isnull().sum())

"""# Drop or Fill Missing if Needed (Optional)

"""

df.fillna(method='ffill', inplace=True)  # or use df.dropna()

"""#Check for Duplicates

"""

duplicates = df.duplicated().sum()
print(f"\n🔹 Duplicate Rows: {duplicates}")

"""# Check Unique Values Per Categorical Column

"""

print("\n🔹 Unique Value Counts:")
for col in df.select_dtypes(include='object'):
    print(f"{col}: {df[col].nunique()} unique values")

"""# Clean column names (optional, consistent format)

"""

df.columns = df.columns.str.strip().str.replace(" ", "_").str.lower()

df.columns

"""#Year-wise Total Sales

"""

yearly_sales = df.groupby('year')['units_sold'].sum().reset_index()
yearly_sales

yearly_sales = df.groupby('year')['units_sold'].sum().reset_index()

plt.figure()
bar = sns.barplot(data=yearly_sales, x='year', y='units_sold', palette='Blues_d')
for p in bar.patches:
    bar.annotate(f'{int(p.get_height()):,}',
                 (p.get_x() + p.get_width() / 2., p.get_height()),
                 ha='center', va='bottom', fontsize=10)
plt.title("📅 Total Car Sales per Year")
plt.ylabel("Units Sold")
plt.xlabel("Year")
plt.show()

"""# Year-on-Year Growth (%)

"""

yearly_sales['YoY_Growth_%'] = yearly_sales['units_sold'].pct_change() * 100

plt.figure()
line = sns.lineplot(data=yearly_sales, x='year', y='YoY_Growth_%', marker='o', color='green')
for x, y in zip(yearly_sales['year'], yearly_sales['YoY_Growth_%']):
    plt.text(x, y + 0.5, f'{y:.1f}%', ha='center')
plt.title("📈 Year-on-Year Growth in Car Sales")
plt.ylabel("Growth (%)")
plt.xlabel("Year")
plt.axhline(0, color='gray', linestyle='--')
plt.show()

"""# Total Sales by Country

"""

country_sales = df.groupby('country')['units_sold'].sum().sort_values(ascending=False).reset_index()

plt.figure()
bar = sns.barplot(data=country_sales, y='country', x='units_sold', palette='viridis')
for p in bar.patches:
    bar.annotate(f'{int(p.get_width()):,}',
                 (p.get_width(), p.get_y() + p.get_height() / 2),
                 ha='left', va='center', fontsize=10)
plt.title("🌍 Total Car Sales by Country")
plt.xlabel("Units Sold")
plt.ylabel("Country")
plt.show()

"""# Country-wise Sales Over Years

"""

country_yearly = df.groupby(['year', 'country'])['units_sold'].sum().reset_index()

plt.figure()
line = sns.lineplot(data=country_yearly, x='year', y='units_sold', hue='country', marker='o')
for line_country in country_yearly['country'].unique():
    temp = country_yearly[country_yearly['country'] == line_country]
    for x, y in zip(temp['year'], temp['units_sold']):
        plt.text(x, y + 0.5, f'{int(y):,}', ha='center', fontsize=8)
plt.title("🌎 Country-wise Sales Over Years")
plt.ylabel("Units Sold")
plt.xlabel("Year")
plt.show()

"""#Total Sales by Brand

"""

brand_sales = df.groupby('brand')['units_sold'].sum().sort_values(ascending=False).reset_index()

plt.figure()
bar = sns.barplot(data=brand_sales, y='brand', x='units_sold', palette='magma')
for p in bar.patches:
    bar.annotate(f'{int(p.get_width()):,}',
                 (p.get_width(), p.get_y() + p.get_height() / 2),
                 ha='left', va='center', fontsize=10)
plt.title("🚗 Total Sales by Car Brand")
plt.xlabel("Units Sold")
plt.ylabel("Brand")
plt.show()

"""# Year-wise Trend of Top 6 Brands

"""

top_brands = brand_sales.head(6)['brand'].tolist()
brand_yearly = df[df['brand'].isin(top_brands)].groupby(['year', 'brand'])['units_sold'].sum().reset_index()

plt.figure()
line = sns.lineplot(data=brand_yearly, x='year', y='units_sold', hue='brand', marker='o')
for brand in brand_yearly['brand'].unique():
    temp = brand_yearly[brand_yearly['brand'] == brand]
    for x, y in zip(temp['year'], temp['units_sold']):
        plt.text(x, y + 0.5, f'{int(y):,}', ha='center', fontsize=8)
plt.title("📈 Year-wise Sales Trend of Top Brands")
plt.xlabel("Year")
plt.ylabel("Units Sold")
plt.show()

"""#  Total Sales by Segment

"""

segment_sales = df.groupby('segment')['units_sold'].sum().sort_values(ascending=False).reset_index()

plt.figure()
bar = sns.barplot(data=segment_sales, y='segment', x='units_sold', palette='coolwarm')
for p in bar.patches:
    bar.annotate(f'{int(p.get_width()):,}',
                 (p.get_width(), p.get_y() + p.get_height() / 2),
                 ha='left', va='center', fontsize=10)
plt.title("🚙 Total Sales by Segment")
plt.xlabel("Units Sold")
plt.ylabel("Segment")
plt.show()

"""#  Segment-wise Yearly Trends

"""

segment_yearly = df.groupby(['year', 'segment'])['units_sold'].sum().reset_index()

plt.figure()
line = sns.lineplot(data=segment_yearly, x='year', y='units_sold', hue='segment', marker='o')
for segment in segment_yearly['segment'].unique():
    temp = segment_yearly[segment_yearly['segment'] == segment]
    for x, y in zip(temp['year'], temp['units_sold']):
        plt.text(x, y + 0.5, f'{int(y):,}', ha='center', fontsize=8)
plt.title("📈 Segment-wise Sales Trends Over Years")
plt.xlabel("Year")
plt.ylabel("Units Sold")
plt.show()

"""# Total Sales by Fuel Type

"""

fuel_sales = df.groupby('fuel_type')['units_sold'].sum().sort_values(ascending=False).reset_index()

plt.figure()
bar = sns.barplot(data=fuel_sales, y='fuel_type', x='units_sold', palette='Set2')
for p in bar.patches:
    bar.annotate(f'{int(p.get_width()):,}',
                 (p.get_width(), p.get_y() + p.get_height() / 2),
                 ha='left', va='center', fontsize=10)
plt.title("⛽ Total Sales by Fuel Type")
plt.xlabel("Units Sold")
plt.ylabel("Fuel Type")
plt.show()

"""# Fuel Type Trends Over Years

"""

fuel_yearly = df.groupby(['year', 'fuel_type'])['units_sold'].sum().reset_index()

plt.figure()
line = sns.lineplot(data=fuel_yearly, x='year', y='units_sold', hue='fuel_type', marker='o')
for fuel in fuel_yearly['fuel_type'].unique():
    temp = fuel_yearly[fuel_yearly['fuel_type'] == fuel]
    for x, y in zip(temp['year'], temp['units_sold']):
        plt.text(x, y + 0.5, f'{int(y):,}', ha='center', fontsize=8)
plt.title("📉 Fuel Type Trend Over Years")
plt.xlabel("Year")
plt.ylabel("Units Sold")
plt.show()